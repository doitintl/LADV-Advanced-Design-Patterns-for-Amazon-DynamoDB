Description: Resources for LDAV DynamoDB workshop, adapted for AWS CloudShell (no Cloud9 dependency).

Parameters:
  EnvironmentName:
    Description: An environment name that is tagged to the resources.
    Type: String
    Default: DynamoDBID
  InstanceType:
    Description: EC2 instance type for the MySQL host used in migration labs.
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
      - t2.medium
      - m5.large
    ConstraintDescription: Must be a valid instance type
  DBLatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  DbMasterUsername:
    Description: The database master user name
    Type: String
    Default: dbuser
  DbMasterPassword:
    Description: The database master password
    Type: String
    NoEcho: true

Mappings:
  # AWS Managed Prefix Lists for EC2 InstanceConnect (for optional SSH)
  AWSRegions2PrefixListID:
    ap-south-1:
      PrefixList: pl-0fa83cebf909345ca
    eu-north-1:
      PrefixList: pl-0bd77a95ba8e317a6
    eu-west-3:
      PrefixList: pl-0f2a97ab210dbbae1
    eu-west-2:
      PrefixList: pl-067eefa539e593d55
    eu-west-1:
      PrefixList: pl-0839cc4c195a4e751
    ap-northeast-3:
      PrefixList: pl-086543b458dc7add9
    ap-northeast-2:
      PrefixList: pl-00ec8fd779e5b4175
    ap-northeast-1:
      PrefixList: pl-08d491d20eebc3b95
    ca-central-1:
      PrefixList: pl-0beea00ad1821f2ef
    sa-east-1:
      PrefixList: pl-029debe66aa9d13b3
    ap-southeast-1:
      PrefixList: pl-073f7512b7b9a2450
    ap-southeast-2:
      PrefixList: pl-0e1bc5673b8a57acc
    eu-central-1:
      PrefixList: pl-03384955215625250
    us-east-1:
      PrefixList: pl-0e4bcff02b13bef1e
    us-east-2:
      PrefixList: pl-03915406641cb1f53
    us-west-1:
      PrefixList: pl-0e99958a47b22d6ab
    us-west-2:
      PrefixList: pl-047d464325e7bf465

Resources:
  # Role used by Lambda helper and lab replication tasks
  DDBReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:PutItem
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Minimal execution role for the custom resource Lambda that discovers a default subnet
  Cloud9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub InstanceDiscovery-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeSubnets
                  - ec2:DescribeInstanceTypeOfferings
                Resource: '*'

  # Helper custom resource to select an available AZ + default subnet for the chosen instance type
  Cloud9FindTheInstanceTypeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt Cloud9LambdaExecutionRole.Arn
      Runtime: python3.9
      MemorySize: 1024
      Timeout: 400
      Code:
        ZipFile: |
          import json
          import boto3
          import random
          import cfnresponse
          import logging

          logger = logging.getLogger(__name__)
          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):
              status = cfnresponse.SUCCESS
              responseData = {}
              try:
                  if event['RequestType'] == 'Delete':
                      responseData = {'Success': 'Custom Resource removed'}
                  elif event['RequestType'] == 'Update':
                      responseData = {'Success': 'No-op'}
                  else:
                      resp = ec2.describe_subnets(Filters=[{'Name':'default-for-az','Values': ['true']}])
                      inst_types = [event['ResourceProperties']['InstanceType']]
                      subnet_ids = {s['AvailabilityZone']: s['SubnetId'] for s in resp['Subnets']}
                      offerings = get_offerings(inst_types)
                      candidates = []
                      for inst in inst_types:
                          for az in offerings.get(inst, []):
                              if az in subnet_ids:
                                  candidates.append((inst, subnet_ids[az]))
                      if not candidates:
                          raise Exception('No default subnet found for the requested instance type')
                      instance_type, subnet = random.choice(candidates)
                      responseData = {'InstanceType': instance_type, 'SubnetId': subnet}
              except Exception as e:
                  logger.exception('Failed to find instance type/subnet')
                  status = cfnresponse.FAILED
                  responseData = {'Error': str(e)}
              finally:
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')

          def get_offerings(inst_types):
              resp = ec2.describe_instance_type_offerings(
                  LocationType='availability-zone',
                  Filters=[{'Name': 'instance-type','Values': inst_types}]
              )
              offerings = {}
              for it in resp['InstanceTypeOfferings']:
                  offerings.setdefault(it['InstanceType'], []).append(it['Location'])
              return offerings

  Cloud9FindTheInstanceTypeLambda:
    Type: Custom::Cloud9FindTheInstanceTypeLambda
    Properties:
      ServiceToken: !GetAtt Cloud9FindTheInstanceTypeLambdaFunction.Arn
      Region: !Ref AWS::Region
      StackName: !Ref AWS::StackName
      InstanceType: !Ref InstanceType

  # Staging bucket for migration assets
  MigrationS3Bucket:
    Type: AWS::S3::Bucket

  # EC2 security group for MySQL instance; allows VPC-local MySQL and EC2 Instance Connect SSH if needed
  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySQL security group
      SecurityGroupIngress:
        - CidrIp: 172.31.0.0/16
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
        - Description: Allow EC2 Instance Connect
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          SourcePrefixListId: !FindInMap [AWSRegions2PrefixListID, !Ref 'AWS::Region', PrefixList]
      Tags:
        - Key: Name
          Value: MySQL-SecurityGroup

  # Instance profile/role to enable SSM Session Manager access from CloudShell
  DBInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DBInstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  DBInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: DBInstanceProfile
      Path: /
      Roles:
        - !Ref DBInstanceRole

  # MySQL EC2 instance used by the relational migration section
  DbInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref DBLatestAmiId
      InstanceType: !GetAtt Cloud9FindTheInstanceTypeLambda.InstanceType
      SecurityGroupIds:
        - !GetAtt DbSecurityGroup.GroupId
      SubnetId: !GetAtt Cloud9FindTheInstanceTypeLambda.SubnetId
      IamInstanceProfile: !Ref DBInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 50
            DeleteOnTermination: True
            Encrypted: True
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          sudo su
          rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
          rpm -Uvh https://repo.mysql.com/mysql80-community-release-el7-3.noarch.rpm
          yum install -y mysql-community-server unzip
          systemctl enable mysqld
          systemctl start mysqld
          export DbMasterPassword=${DbMasterPassword}
          export DbMasterUsername=${DbMasterUsername}
          mysql -u root "-p$(grep -oP '(?<=root@localhost\: )\S+' /var/log/mysqld.log)" -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${DbMasterPassword}'" --connect-expired-password
          mysql -u root "-p${DbMasterPassword}" -e "CREATE USER '${DbMasterUsername}' IDENTIFIED BY '${DbMasterPassword}'"
          mysql -u root "-p${DbMasterPassword}" -e "GRANT ALL PRIVILEGES ON *.* TO '${DbMasterUsername}'"
          mysql -u root "-p${DbMasterPassword}" -e "FLUSH PRIVILEGES"
          mysql -u root "-p${DbMasterPassword}" -e "CREATE DATABASE app_db;"
          cd /var/lib/mysql-files/
          curl -O https://www.amazondynamodblabs.com/static/rdbms-migration/rdbms-migration.zip
          unzip -q rdbms-migration.zip || true
          chmod 775 *.* || true
          mysql -u root "-p${DbMasterPassword}" -e "CREATE DATABASE IF NOT EXISTS imdb;"
          mysql -u root "-p${DbMasterPassword}" -e "CREATE TABLE IF NOT EXISTS imdb.title_akas (titleId VARCHAR(200), ordering VARCHAR(200),title VARCHAR(1000), region VARCHAR(1000), language VARCHAR(1000), types VARCHAR(1000),attributes VARCHAR(1000),isOriginalTitle VARCHAR(5),primary key (titleId, ordering));"
          mysql -u root "-p${DbMasterPassword}" -e "CREATE TABLE IF NOT EXISTS imdb.title_basics (tconst  VARCHAR(200), titleType  VARCHAR(1000),primaryTitle  VARCHAR(1000), originalTitle  VARCHAR(1000), isAdult  VARCHAR(1000), startYear  VARCHAR(1000),endYear  VARCHAR(1000),runtimeMinutes  VARCHAR(1000),genres  VARCHAR(1000),primary key (tconst));"
          mysql -u root "-p${DbMasterPassword}" -e "CREATE TABLE IF NOT EXISTS imdb.title_crew (tconst  VARCHAR(200), directors  VARCHAR(1000),writers  VARCHAR(1000),primary key (tconst));"
          mysql -u root "-p${DbMasterPassword}" -e "CREATE TABLE IF NOT EXISTS imdb.title_principals (tconst  VARCHAR(200), ordering  VARCHAR(200),nconst  VARCHAR(200), category  VARCHAR(1000), job  VARCHAR(1000), characters  VARCHAR(1000),primary key (tconst,ordering,nconst));"
          mysql -u root "-p${DbMasterPassword}" -e "CREATE TABLE IF NOT EXISTS imdb.title_ratings (tconst  VARCHAR(200), averageRating float,numVotes  integer,primary key (tconst));"
          mysql -u root "-p${DbMasterPassword}" -e "CREATE TABLE IF NOT EXISTS imdb.name_basics (nconst  VARCHAR(200), primaryName  VARCHAR(1000),birthYear  VARCHAR(1000), deathYear  VARCHAR(1000), primaryProfession  VARCHAR(1000), knownForTitles VARCHAR(1000),primary key (nconst));"
          mysql -u root "-p${DbMasterPassword}" -e "LOAD DATA INFILE '/var/lib/mysql-files/title_ratings.tsv' IGNORE INTO TABLE imdb.title_ratings FIELDS TERMINATED BY '\t';"
          mysql -u root "-p${DbMasterPassword}" -e "LOAD DATA INFILE '/var/lib/mysql-files/title_basics.tsv'  IGNORE INTO TABLE imdb.title_basics FIELDS TERMINATED BY '\t';"
          mysql -u root "-p${DbMasterPassword}" -e "LOAD DATA INFILE '/var/lib/mysql-files/title_crew.tsv' IGNORE INTO TABLE imdb.title_crew FIELDS TERMINATED BY '\t';"
          mysql -u root "-p${DbMasterPassword}" -e "LOAD DATA INFILE '/var/lib/mysql-files/title_principals.tsv' IGNORE INTO TABLE imdb.title_principals FIELDS TERMINATED BY '\t';"
          mysql -u root "-p${DbMasterPassword}" -e "LOAD DATA INFILE '/var/lib/mysql-files/name_basics.tsv' IGNORE INTO TABLE imdb.name_basics FIELDS TERMINATED BY '\t';"
          mysql -u root "-p${DbMasterPassword}" -e "LOAD DATA INFILE '/var/lib/mysql-files/title_akas.tsv' IGNORE INTO  TABLE imdb.title_akas FIELDS TERMINATED BY '\t';"
      Tags:
        - Key: Name
          Value: MySQL-Instance

Outputs:
  MigrationS3BucketName:
    Description: S3 bucket for migration artifacts
    Value: !Ref MigrationS3Bucket
    Export:
      Name: MigrationS3Bucket
  DDBReplicationRoleArn:
    Description: IAM role ARN for DynamoDB replication Lambda
    Value: !GetAtt DDBReplicationRole.Arn
    Export:
      Name: DDBReplicationRoleArn
  DbInstanceId:
    Description: EC2 instance ID for MySQL host
    Value: !Ref DbInstance
  DbSecurityGroupId:
    Description: Security group ID for MySQL host
    Value: !GetAtt DbSecurityGroup.GroupId
  SelectedSubnetId:
    Description: Default subnet chosen for the instance
    Value: !GetAtt Cloud9FindTheInstanceTypeLambda.SubnetId

